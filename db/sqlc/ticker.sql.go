// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ticker.sql

package db

import (
	"context"
)

const createTicker = `-- name: CreateTicker :one
INSERT INTO tickers (
  symbol,
  description,
  exchange,
  currency
) VALUES (
  $1, $2, $3, $4
) RETURNING id, symbol, description, exchange, currency, created_at, updated_at
`

type CreateTickerParams struct {
	Symbol      string `json:"symbol"`
	Description string `json:"description"`
	Exchange    string `json:"exchange"`
	Currency    string `json:"currency"`
}

func (q *Queries) CreateTicker(ctx context.Context, arg CreateTickerParams) (Ticker, error) {
	row := q.db.QueryRow(ctx, createTicker,
		arg.Symbol,
		arg.Description,
		arg.Exchange,
		arg.Currency,
	)
	var i Ticker
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Description,
		&i.Exchange,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTicker = `-- name: DeleteTicker :exec
DELETE FROM tickers
WHERE id = $1
`

func (q *Queries) DeleteTicker(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTicker, id)
	return err
}

const getTicker = `-- name: GetTicker :one
SELECT id, symbol, description, exchange, currency, created_at, updated_at FROM tickers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTicker(ctx context.Context, id int64) (Ticker, error) {
	row := q.db.QueryRow(ctx, getTicker, id)
	var i Ticker
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Description,
		&i.Exchange,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTickers = `-- name: ListTickers :many
SELECT id, symbol, description, exchange, currency, created_at, updated_at FROM tickers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTickersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTickers(ctx context.Context, arg ListTickersParams) ([]Ticker, error) {
	rows, err := q.db.Query(ctx, listTickers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticker{}
	for rows.Next() {
		var i Ticker
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Description,
			&i.Exchange,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDescriptionTicker = `-- name: UpdateDescriptionTicker :one
UPDATE tickers
SET description = $2
WHERE id = $1
RETURNING id, symbol, description, exchange, currency, created_at, updated_at
`

type UpdateDescriptionTickerParams struct {
	ID          int64  `json:"id"`
	Description string `json:"description"`
}

func (q *Queries) UpdateDescriptionTicker(ctx context.Context, arg UpdateDescriptionTickerParams) (Ticker, error) {
	row := q.db.QueryRow(ctx, updateDescriptionTicker, arg.ID, arg.Description)
	var i Ticker
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Description,
		&i.Exchange,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
